#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "libImages.h"
#include "libOutils.h"
#include <string.h>
typedef char NOM[100]; // nom des chemin+images born� � 100 caract�res

void main(void)
{
	FILE *F = NULL;
	NOM *liste = NULL; // liste des images
	NOM ligne;
	IMAGE Imin = { 0,0,NULL,NULL }, ImBin = { 0,0,NULL,NULL };
	IMAGE Imcomp = { 0,0,NULL,NULL }, ImLab = { 0,0,NULL,NULL }, ImFill = { 0,0,NULL,NULL };
	IMAGE ImTopHat = { 0,0,NULL,NULL };
	STRCT_ELEMENT Str = { 0,0,NULL,NULL };
	int nb = 0, Aire = 0;
	char *nom = NULL;
	char Folder[5], NomFichier[8], Tempo[11];
	const char * separators = " ,-!:\\";
	char Dossier[50];
	int ind = 0;
	// mise en m�moire images pgm/ppm 

	//system("dir test /S /B *.p*m > listeDesImagestest.txt");
	//system("dir train /S /B  *.p*m > listeDesImagestrain.txt");
	F = fopen("listeDesImagestrain.txt", "r");
	while (fscanf(F, "%s",ligne) > 0)
	{
		if (!liste)
		{
			liste = (NOM*)malloc(sizeof(NOM));
			strcpy(liste[nb], ligne);
			nb++;
		}
		else
		{
			liste = (NOM*)realloc(liste, sizeof(NOM)*(++nb));
			strcpy(liste[nb - 1], ligne);
		}
	}
	fclose(F);
	char * strToken = NULL;
	for (int i = 0; i < nb; i++)
	{
		strToken = strtok(liste[i], separators);
		while (strToken != NULL) {
			ind++;
			if (ind == 9)
			{
				strcpy(Folder, strToken);
			}
			else if (ind ==10)
			{
				strcpy(NomFichier, strToken);
				strcat(Folder, "\\");
				strcpy(Tempo, Folder);
				strcat(Tempo, NomFichier);
				strcpy(liste[i], Tempo);
			}
			// On demande le token suivant.
			strToken = strtok(NULL, separators);
		
		}
		ind = 0;
	}
	Str = fct_generationElementStructurant(1, 3);
	for (int i = 195; i < 210; i++)
	{
		strcpy(Dossier, "train\\");
		strcat(Dossier, liste[i]);
		Imin = lectureImage(Dossier);
		Imcomp = inverseImage(Imin);
		ImBin = seuillageOtsu(Imcomp);
		ImFill = fct_bouchageTrou(ImBin);
		ImTopHat = fct_erosion(ImFill,Str);
		sauvegardeImage(ImTopHat, "P5", "..\\Res\\fillIm.pgm");
		Aire = fct_Aire(ImTopHat);
		printf("Aire de l'imgage %s : %d\n", liste[i], Aire);
		liberationImage(&Imin);
		liberationImage(&ImBin);
		liberationImage(&ImFill);
		liberationImage(&ImTopHat);
	}
	free(liste);
	system("pause");
}